// Mocks generated by Mockito 5.3.2 from annotations
// in s_c/test/features/login_test/domain/repositories/login_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:s_c/core/network/network_info.dart' as _i5;
import 'package:s_c/features/login/data/datasources/login_remote_data_source.dart'
    as _i3;
import 'package:s_c/features/splash/data/models/sc_user_model.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSCUserModel_0 extends _i1.SmartFake implements _i2.SCUserModel {
  _FakeSCUserModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LoginRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginRemoteDataSource extends _i1.Mock
    implements _i3.LoginRemoteDataSource {
  MockLoginRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.SCUserModel> loginWithUsernameAndPw({
    required String? username,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginWithUsernameAndPw,
          [],
          {
            #username: username,
            #password: password,
          },
        ),
        returnValue: _i4.Future<_i2.SCUserModel>.value(_FakeSCUserModel_0(
          this,
          Invocation.method(
            #loginWithUsernameAndPw,
            [],
            {
              #username: username,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i2.SCUserModel>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i5.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [LoginRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockNumberTriviaRemoteDataSourceForTest extends _i1.Mock
    implements _i3.LoginRemoteDataSource {
  @override
  _i4.Future<_i2.SCUserModel> loginWithUsernameAndPw({
    required String? username,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginWithUsernameAndPw,
          [],
          {
            #username: username,
            #password: password,
          },
        ),
        returnValue: _i4.Future<_i2.SCUserModel>.value(_FakeSCUserModel_0(
          this,
          Invocation.method(
            #loginWithUsernameAndPw,
            [],
            {
              #username: username,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.SCUserModel>.value(_FakeSCUserModel_0(
          this,
          Invocation.method(
            #loginWithUsernameAndPw,
            [],
            {
              #username: username,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i2.SCUserModel>);
}
