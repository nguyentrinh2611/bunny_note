// Mocks generated by Mockito 5.3.2 from annotations
// in s_c/test/features/splash_test/presentation/cubit/splash_test_cubit.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:s_c/app/domain/entities/sc_user.dart' as _i9;
import 'package:s_c/core/error/failures.dart' as _i6;
import 'package:s_c/core/usecases/usecase.dart' as _i7;
import 'package:s_c/features/splash/domain/repositories/splash_repository.dart'
    as _i2;
import 'package:s_c/features/splash/domain/usecases/check_first_launch.dart'
    as _i3;
import 'package:s_c/features/splash/domain/usecases/check_remembered_login.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSplashRepository_0 extends _i1.SmartFake
    implements _i2.SplashRepository {
  _FakeSplashRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CheckFirstLaunch].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckFirstLaunch extends _i1.Mock implements _i3.CheckFirstLaunch {
  MockCheckFirstLaunch() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SplashRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeSplashRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.SplashRepository);
  @override
  _i4.Future<_i5.Either<_i6.Failure, bool>?> call(_i7.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i5.Either<_i6.Failure, bool>?>.value(),
      ) as _i4.Future<_i5.Either<_i6.Failure, bool>?>);
}

/// A class which mocks [CheckRememberedLogin].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckRememberedLogin extends _i1.Mock
    implements _i8.CheckRememberedLogin {
  MockCheckRememberedLogin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SplashRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeSplashRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.SplashRepository);
  @override
  _i4.Future<_i5.Either<_i6.Failure, _i9.SCUser>?> call(_i7.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i5.Either<_i6.Failure, _i9.SCUser>?>.value(),
      ) as _i4.Future<_i5.Either<_i6.Failure, _i9.SCUser>?>);
}
