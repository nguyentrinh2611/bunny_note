// Mocks generated by Mockito 5.3.2 from annotations
// in s_c/test/features/tasks_test/domain/repositories/tasks_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:s_c/core/network/network_info.dart' as _i5;
import 'package:s_c/features/register/domain/entities/task.dart' as _i4;
import 'package:s_c/features/tasks/data/datasources/tasks_remote_datasource.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TasksRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTasksRemoteDataSource extends _i1.Mock
    implements _i2.TasksRemoteDataSource {
  MockTasksRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.SCTask>> getTasks({required String? userUid}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasks,
          [],
          {#userUid: userUid},
        ),
        returnValue: _i3.Future<List<_i4.SCTask>>.value(<_i4.SCTask>[]),
      ) as _i3.Future<List<_i4.SCTask>>);
  @override
  _i3.Future<String> addNewTask({required _i4.SCTask? newTask}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNewTask,
          [],
          {#newTask: newTask},
        ),
        returnValue: _i3.Future<String>.value(''),
      ) as _i3.Future<String>);
  @override
  _i3.Future<String> updateTask({required List<_i4.SCTask>? task}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [],
          {#task: task},
        ),
        returnValue: _i3.Future<String>.value(''),
      ) as _i3.Future<String>);
  @override
  _i3.Future<String> deleteTask({required List<_i4.SCTask>? task}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [],
          {#task: task},
        ),
        returnValue: _i3.Future<String>.value(''),
      ) as _i3.Future<String>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i5.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}

/// A class which mocks [TasksRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class TasksRemoteDataSourceForTest extends _i1.Mock
    implements _i2.TasksRemoteDataSource {
  @override
  _i3.Future<List<_i4.SCTask>> getTasks({required String? userUid}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasks,
          [],
          {#userUid: userUid},
        ),
        returnValue: _i3.Future<List<_i4.SCTask>>.value(<_i4.SCTask>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.SCTask>>.value(<_i4.SCTask>[]),
      ) as _i3.Future<List<_i4.SCTask>>);
  @override
  _i3.Future<String> addNewTask({required _i4.SCTask? newTask}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNewTask,
          [],
          {#newTask: newTask},
        ),
        returnValue: _i3.Future<String>.value(''),
        returnValueForMissingStub: _i3.Future<String>.value(''),
      ) as _i3.Future<String>);
  @override
  _i3.Future<String> updateTask({required List<_i4.SCTask>? task}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [],
          {#task: task},
        ),
        returnValue: _i3.Future<String>.value(''),
        returnValueForMissingStub: _i3.Future<String>.value(''),
      ) as _i3.Future<String>);
  @override
  _i3.Future<String> deleteTask({required List<_i4.SCTask>? task}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [],
          {#task: task},
        ),
        returnValue: _i3.Future<String>.value(''),
        returnValueForMissingStub: _i3.Future<String>.value(''),
      ) as _i3.Future<String>);
}
