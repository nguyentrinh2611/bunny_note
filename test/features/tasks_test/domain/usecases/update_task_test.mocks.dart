// Mocks generated by Mockito 5.3.2 from annotations
// in s_c/test/features/tasks_test/domain/usecases/update_task_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:s_c/core/error/failures.dart' as _i5;
import 'package:s_c/features/register/domain/entities/task.dart' as _i6;
import 'package:s_c/features/tasks/domain/repositories/tasks_repository.dart'
    as _i3;
import 'package:s_c/features/tasks/domain/usecases/delete_task.dart' as _i8;
import 'package:s_c/features/tasks/domain/usecases/update_task.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TasksRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTasksRepository extends _i1.Mock implements _i3.TasksRepository {
  MockTasksRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.SCTask>>> getTasks(
          {required String? userUid}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasks,
          [],
          {#userUid: userUid},
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.SCTask>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.SCTask>>(
          this,
          Invocation.method(
            #getTasks,
            [],
            {#userUid: userUid},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.SCTask>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> addNewTask(
          {required _i6.SCTask? newTask}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNewTask,
          [],
          {#newTask: newTask},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #addNewTask,
            [],
            {#newTask: newTask},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> updateTask(
          {required _i7.UpdateTaskParram? parram}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [],
          {#parram: parram},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #updateTask,
            [],
            {#parram: parram},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> deletetask(
          {required _i8.DeleteTaskParams? parram}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deletetask,
          [],
          {#parram: parram},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #deletetask,
            [],
            {#parram: parram},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);
}
